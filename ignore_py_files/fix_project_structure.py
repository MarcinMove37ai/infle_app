#!/usr/bin/env python3
"""
Skrypt naprawczy dla struktury projektu Next.js
Usuwa nieprawid≈Çowe duplikaty i naprawia konfiguracjƒô
"""

import os
import shutil
from pathlib import Path
import json


def find_project_root():
    """Znajduje g≈Ç√≥wny folder projektu"""
    current_path = Path(__file__).parent
    while current_path.parent != current_path:
        current_path = current_path.parent
        if (current_path / 'package.json').exists():
            return current_path
    return Path(__file__).parent.parent


def backup_file(file_path):
    """Tworzy kopiƒô zapasowƒÖ pliku"""
    backup_path = file_path.with_suffix(file_path.suffix + '.backup')
    if file_path.exists():
        shutil.copy2(file_path, backup_path)
        print(f"üì¶ Kopia zapasowa: {backup_path}")


def fix_next_config():
    """Naprawia next.config.ts - usuwa przestarza≈ÇƒÖ konfiguracjƒô"""
    project_root = find_project_root()
    next_config_path = project_root / 'next.config.ts'

    if not next_config_path.exists():
        print("‚ö†Ô∏è  Nie znaleziono next.config.ts")
        return

    backup_file(next_config_path)

    # Nowa, poprawna konfiguracja dla Next.js 15
    new_config = '''import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;
'''

    with open(next_config_path, 'w', encoding='utf-8') as f:
        f.write(new_config)

    print("‚úÖ Naprawiono next.config.ts")


def remove_duplicate_files():
    """Usuwa nieprawid≈Çowe duplikaty z folderu src/"""
    project_root = find_project_root()
    src_path = project_root / 'src'

    # Lista plik√≥w do usuniƒôcia z src/
    files_to_remove = [
        'package.json',  # Nieprawid≈Çowy JSON
        'next.config.ts',  # Duplikat
        'page.tsx',  # Niepotrzebny w src
        'layout.tsx',  # Pusty duplikat
        'tsconfig.json',  # Duplikat
        'postcss.config.mjs',  # Duplikat
        'tailwind.config.js',  # Duplikat
        'globals.css'  # Duplikat (pozostaw tylko w src/app/)
    ]

    for file_name in files_to_remove:
        file_path = src_path / file_name
        if file_path.exists():
            backup_file(file_path)
            file_path.unlink()
            print(f"üóëÔ∏è  Usuniƒôto: src/{file_name}")


def clean_build_cache():
    """Czy≈õci cache Next.js"""
    project_root = find_project_root()
    cache_dirs = ['.next', 'node_modules/.cache']

    for cache_dir in cache_dirs:
        cache_path = project_root / cache_dir
        if cache_path.exists():
            shutil.rmtree(cache_path)
            print(f"üßπ Wyczyszczono cache: {cache_dir}")


def verify_main_package_json():
    """Sprawdza i naprawia g≈Ç√≥wny package.json"""
    project_root = find_project_root()
    package_json_path = project_root / 'package.json'

    if not package_json_path.exists():
        print("‚ùå Brak g≈Ç√≥wnego package.json!")
        return False

    try:
        with open(package_json_path, 'r', encoding='utf-8') as f:
            package_data = json.load(f)

        print(f"‚úÖ G≈Ç√≥wny package.json jest prawid≈Çowy")
        print(f"   üì¶ Projekt: {package_data.get('name', 'unknown')}")
        print(f"   üè∑Ô∏è  Wersja: {package_data.get('version', 'unknown')}")
        return True

    except json.JSONDecodeError as e:
        print(f"‚ùå B≈ÇƒÖd w g≈Ç√≥wnym package.json: {e}")
        return False


def check_typescript_config():
    """Sprawdza konfiguracjƒô TypeScript"""
    project_root = find_project_root()
    tsconfig_path = project_root / 'tsconfig.json'

    if tsconfig_path.exists():
        try:
            with open(tsconfig_path, 'r', encoding='utf-8') as f:
                tsconfig = json.load(f)

            # Sprawd≈∫ czy paths sƒÖ poprawnie skonfigurowane
            paths = tsconfig.get('compilerOptions', {}).get('paths', {})
            if '@/*' in paths:
                print("‚úÖ TypeScript paths sƒÖ skonfigurowane")
            else:
                print("‚ö†Ô∏è  Brak konfiguracji paths w tsconfig.json")

        except json.JSONDecodeError:
            print("‚ùå B≈ÇƒÖd w tsconfig.json")
    else:
        print("‚ö†Ô∏è  Brak tsconfig.json")


def create_env_example():
    """Tworzy .env.example je≈õli nie istnieje"""
    project_root = find_project_root()
    env_example_path = project_root / '.env.example'

    if not env_example_path.exists():
        env_content = '''# Database
DATABASE_URL="your_database_url_here"

# NextAuth.js
NEXTAUTH_SECRET="your_nextauth_secret_here"
NEXTAUTH_URL="http://localhost:3000"

# Supervisor Code
SUPERVISOR_CODE="your_supervisor_code_here"
'''

        with open(env_example_path, 'w', encoding='utf-8') as f:
            f.write(env_content)

        print("‚úÖ Utworzono .env.example")


def show_next_steps():
    """Pokazuje kolejne kroki do wykonania"""
    print("\n" + "=" * 50)
    print("üéØ KOLEJNE KROKI DO WYKONANIA:")
    print("=" * 50)
    print("1. Usu≈Ñ folder .next:")
    print("   rm -rf .next")
    print()
    print("2. Zainstaluj dependencje:")
    print("   npm install")
    print()
    print("3. Sprawd≈∫ czy Prisma jest skonfigurowana:")
    print("   npx prisma generate")
    print("   npx prisma db push")
    print()
    print("4. Uruchom projekt:")
    print("   npm run dev")
    print()
    print("5. Je≈õli nadal sƒÖ b≈Çƒôdy, sprawd≈∫:")
    print("   - Czy plik .env zawiera prawid≈Çowe warto≈õci")
    print("   - Czy baza danych jest dostƒôpna")
    print("   - Czy wszystkie dependencje sƒÖ kompatybilne")


def main():
    """G≈Ç√≥wna funkcja naprawcza"""
    print("üöÄ Rozpoczynanie naprawy struktury projektu Next.js...")
    print("=" * 50)

    project_root = find_project_root()
    print(f"üìÅ Projekt: {project_root}")
    print()

    # 1. Sprawd≈∫ g≈Ç√≥wny package.json
    print("1Ô∏è‚É£  Sprawdzanie g≈Ç√≥wnego package.json...")
    if not verify_main_package_json():
        print("‚ùå Nie mo≈ºna kontynuowaƒá - problem z package.json")
        return
    print()

    # 2. Usu≈Ñ nieprawid≈Çowe duplikaty
    print("2Ô∏è‚É£  Usuwanie nieprawid≈Çowych duplikat√≥w...")
    remove_duplicate_files()
    print()

    # 3. Napraw next.config.ts
    print("3Ô∏è‚É£  Naprawa next.config.ts...")
    fix_next_config()
    print()

    # 4. Sprawd≈∫ TypeScript
    print("4Ô∏è‚É£  Sprawdzanie konfiguracji TypeScript...")
    check_typescript_config()
    print()

    # 5. Utw√≥rz .env.example
    print("5Ô∏è‚É£  Tworzenie .env.example...")
    create_env_example()
    print()

    # 6. Wyczy≈õƒá cache
    print("6Ô∏è‚É£  Czyszczenie cache...")
    clean_build_cache()
    print()

    print("‚úÖ Naprawa struktury zako≈Ñczona!")
    show_next_steps()


if __name__ == "__main__":
    main()