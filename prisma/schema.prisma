// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum dla typów profili społecznościowych
enum SocialProfileType {
  INSTAGRAM_ONLY
  LINKEDIN_ONLY
  BOTH
  NONE
}

model User {
  id                  String              @id @default(cuid())
  email               String              @unique
  firstName           String
  lastName            String
  phone               String?
  socialLink          String?
  profilePicture      String?
  password            String
  emailVerified       DateTime?
  verificationToken   String?
  resetToken          String?
  resetTokenExpiry    DateTime?

  // Nowe pola dla profili społecznościowych
  instagramUsername   String?             // 🆕 Username Instagram dla łatwego dostępu
  instagramProfileId  String?
  linkedinProfileId   String?
  socialProfileType   SocialProfileType   @default(NONE)

  // Relacje do profili społecznościowych (opcjonalne)
  instagramProfile    InstagramProfileCheck? @relation(fields: [instagramProfileId], references: [id])
  linkedinProfile     LinkedInProfileCheck?  @relation(fields: [linkedinProfileId], references: [id])

  // Relacja do analiz Instagram
  instagramAnalyses   InstagramCreatorAnalysis[]

  // 🆕 NOWA RELACJA - Analizy AI
  instagramAIAnalyses InstagramCreatorAIAnalysis[]

  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt

  @@map("users")
}

model InstagramProfileCheck {
  id                String    @id @default(cuid())
  instagramUrl      String
  instagramId       String?
  username          String
  fullName          String?
  biography         String?
  followersCount    Int?
  followsCount      Int?
  postsCount        Int?
  highlightReelCount Int?     // NOWE POLE - liczba highlight reels
  profilePicUrl     String?
  profilePicUrlHD   String?
  isBusinessAccount Boolean   @default(false) // TYMCZASOWO - usuniemy po migracji
  isPrivate         Boolean   @default(false)
  isVerified        Boolean   @default(false)
  businessCategory  String?
  checkedAt         DateTime  @default(now())
  userIp            String?
  userAgent         String?

  // Relacja zwrotna do User (jeden profil może być powiązany z wieloma userami)
  users             User[]

  @@map("instagram_profile_checks")
}

model LinkedInProfileCheck {
  id                String    @id @default(cuid())
  linkedinUrl       String
  firstName         String?
  lastName          String?
  fullName          String?
  headline          String?
  aboutExcerpt      String?   // Biografia skrócona do 500 znaków
  connectionsCount  Int?
  followersCount    Int?
  profilePicUrl     String?
  jobTitle          String?
  companyName       String?
  companyIndustry   String?
  location          String?
  topSkills         String?   // Top 5 umiejętności jako string
  checkedAt         DateTime  @default(now())
  userIp            String?
  userAgent         String?

  // Relacja zwrotna do User (jeden profil może być powiązany z wieloma userami)
  users             User[]

  @@map("linkedin_profile_checks")
}

// MODEL - Analiza postów Instagram (istniejący)
model InstagramCreatorAnalysis {
  id                String    @id @default(cuid())
  userId            String
  username          String
  postId            String
  caption           String    @db.Text  // Długi tekst
  likesCount        Int       @default(0)
  commentsCount     Int       @default(0)
  videoPlayCount    Int?      // Nullable dla zdjęć
  videoDuration     Int?      // Nullable dla zdjęć
  commenterUsernames Json     // JSONB dla Record<string, number>

  // Metadane
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relacja do użytkownika
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indeksy dla wydajności
  @@index([userId])
  @@index([username])
  @@index([postId])
  @@unique([userId, postId]) // Jeden post na user

  @@map("instagram_creator_analysis")
}

// 🆕 NOWY MODEL - Wyniki AI Analysis
model InstagramCreatorAIAnalysis {
  id                   String   @id @default(cuid())
  userId               String
  username             String
  profileDescription   String   @db.Text
  competencies         Json     // Array of AICompetency objects
  uniqueTalent         Json     // AIUniqueTalent object
  metadata             Json     // AI metadata (model, version, etc.)
  postsAnalyzed        Int
  aiModel              String   @default("claude-3-5-sonnet-20241022")
  version              String   @default("2.0")
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relacja do użytkownika
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes for better performance
  @@index([userId])
  @@index([username])
  @@index([userId, username])
  @@unique([userId, username]) // One analysis per user-username combination

  @@map("instagram_creator_ai_analysis")
}